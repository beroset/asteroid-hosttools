#! /bin/bash
# Copyright (C) 2023 Ed Beroset <beroset@ieee.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

VERSION="1.3"

function showVersion {
    echo "flashy v${VERSION}"
}

#    codename           tempcmd         permcmd
declare -a devices=(
    "anthias            tempUser        permUser"
    "bass               tempUser        permUser"
    "beluga             tempRecovery    permUser"
    "catfish            tempUser        permUser"
    "dory               tempUser        permUser"
    "firefish           tempUser        permUser"
    "harmony            tempUser        permUser"
    "hoki               tempRecovery    permUser"
    "koi                tempUser        permUser"
    "inharmony          tempUser        permUser"
    "lenok              tempUser        permUser"
    "minnow             tempUser        permUser"
    "mooneye            tempUser        permUser"
    "narwhal            tempUser        permUser"
    "nemo               tempUser        permUser"
    "pike               tempUser        permUser"
    "ray                tempUser        permUser"
    "smelt              tempUser        permUser"
    "sparrow            tempUser        permUser"
    "sparrow-mainline   tempUser        permUser"
    "sprat              tempUser        permUser"
    "sturgeon           tempUser        permUser"
    "sawfish            tempUser        permUser"
    "skipjack           tempUser        permUser"
    "swift              tempUser        permUser"
    "tetra              tempUser        permUser"
    "triggerfish        tempUser        permUser"
    "wren               tempUser        permUser"
)

# point to where the images get built
defaultbuilddir="${ASTEROIDROOT}/build/tmp-glibc/deploy/images"
# assume we're not already in fastboot mode
fastboot=false
# assume we're not in dryrun mode
condecho=''
# do permanent install unless told otherwise
temp=false
# assume the watch is currently in SSH mode
useadb=false
# set empty builddir to start
builddir=''
# nightly url base directory
nightlyurl="https://release.asteroidos.org/nightlies"

function showHelp {
    showVersion
    cat << EOF
./flashy codename [option]
Deploy AsteroidOS binary image to a watch.

Available options:
-h or --help        prints this help screen and quits
-a or --adb         use ADB mode to reboot to fastboot
-b or --bootonly    only push the boot image (implies temp; image already pushed)
-f or --fastboot    watch is already in fastboot mode
-l or --local       image files are in current working directory
-t or --temp        perform a temporary install (watch is running WearOS)
-n or --nightly     download image file(s) from nightly builds
-N or --dryrun      don't actually flash, just show what would happen
-v or --version     displays the version of this program

EOF
}

function findDevice {
    for l in "${devices[@]}"; do
        if [ -n "$ZSH_VERSION" ]; then
            read -A spec <<< "$l"
        else
            read -a spec <<< "$l"
        fi
        codename="${spec[@]:0:1}"
        tempcmd="${spec[@]:1:1}"
        permcmd="${spec[@]:2:1}"
        if [ "${codename}" = "$1" ]; then
            valid=true
            return 0
        fi
    done
    return 1
}

function enterFastboot {
    if [ "${fastboot}" != "true" ] ; then
        if [ "${useadb}" = true ] ; then
            ${condecho} adb reboot bootloader || exit 1
        else
            ${condecho} ssh root@192.168.2.15 "reboot bootloader"
        fi
    fi
}

function permUser {
    local bootfile="$1"
    local imagefile="$2"
    enterFastboot
    ${condecho} fastboot oem unlock
    ${condecho} fastboot flash userdata "${imgfile}" || exit 1
    ${condecho} fastboot flash boot "${bootfile}" || exit 1
    ${condecho} fastboot continue
}

function tempUser {
    local bootfile="$1"
    local imagefile="$2"
    if [ "${bootonly}" != true ] ; then
        ${condecho} adb push -p "${imgfile}" /sdcard/asteroidos.ext4 || exit 1
    fi
    enterFastboot
    ${condecho} fastboot oem unlock
    ${condecho} fastboot boot "${bootfile}" || exit 1
}

# temporary installation into recovery partition
function tempRecovery {
    local bootfile="$1"
    local imagefile="$2"
    enterFastboot
    ${condecho} fastboot oem unlock
    ${condecho} fastboot flash recovery "${bootfile}" || exit 1
    echo "Now use the buttons to boot into the recovery partition"
    echo "and press the lower button within 1 second after the"
    echo "orange AsteroidOS logo appears"
    ${condecho} adb wait-for-usb-device
    ${condecho} adb push -p "${imgfile}" /sdcard/asteroidos.ext4 || exit 1
    ${condecho} adb reboot recovery
}


function warnIfNoBackup {
    backupfile="original-${codename}.img"
    if [ ! -f "${backupfile}" ] ; then
        echo "Warning: permanent install being attempted without backup file ${backupfile} present"
        echo "It is STRONGLY advised to make a backup before attempting a permanent install as with this command:"
        echo "watch-util ${codename} save"
        read -p "Continue anyway? " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] ; then
            return
        else 
            echo "Cancelling operation."
            exit 1 
        fi
    fi
}

if [ -z "$ASTEROIDROOT" ] ; then
    echo "WARNING: ASTEROIDROOT environment variable not set"
fi

while [[ $# -gt 0 ]] ; do
    case $1 in 
        -a|--adb)
            useadb=true
            shift
            ;;
        -b|--bootonly)
            bootonly=true
            temp=true
            shift
            ;;
        -f|--fastboot)
            fastboot=true
            shift
            ;;
        -h|--help)
            showHelp
            exit 1
            ;;
        -l|--local)
            builddir=$(pwd)
            shift
            ;;
        -n|--nightly)
            nightly=true
            builddir=$(pwd)
            shift
            ;;
        -N|--dryrun)
            condecho="echo"
            shift
            ;;
        -t|--temp)
            temp=true
            shift
            ;;
        -v|--version)
            showVersion
            shift
            ;;
        *)
            valid=false
            findDevice "$1" || echo "Ignoring unknown option $1"
            shift
            ;;
    esac
done 

if [ "${valid}" = "false" ] ; then
    echo "You must specify a valid device name."
    showHelp
    exit 0
fi

if [ "${builddir}" = "" ] ; then
    builddir="${defaultbuilddir}/${codename}"
fi
bootfilename=zImage-dtb-${codename}.fastboot
imgfilename=asteroid-image-${codename}.rootfs.ext4

bootfile="${builddir}/${bootfilename}"
imgfile="${builddir}/${imgfilename}"

if [ "${nightly}" = "true" ] ; then
    ${condecho} wget -nc "${nightlyurl}/${codename}/${bootfilename}" -O "${bootfile}"
    ${condecho} wget -nc "${nightlyurl}/${codename}/${imgfilename}" -O "${imgfile}"
    ${condecho} wget -nc "${nightlyurl}/${codename}/SHA512SUMS" -O "SHA512SUMS"
    ${condecho} sha512sum --check SHA512SUMS || exit 1
fi


if [[ ! -f ${bootfile} ]] ; then
    echo "Error: ${bootfile} does not exist"
    exit 2
fi
if [[ ! -f ${imgfile} ]] ; then
    echo "Error: ${imgfile} does not exist"
    exit 2
fi

if [ "${temp}" != true ] ; then
    ${condecho} warnIfNoBackup
fi

if [ "${temp}" = true ] ; then
    ${tempcmd} "${bootfile}" "${imgfile}"
else 
    ${permcmd} "${bootfile}" "${imgfile}"
fi

${condecho} ssh-keygen -R watch
${condecho} ssh-keygen -R 192.168.2.15

